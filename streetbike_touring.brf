################################################################
#          A BRouter profile suited for a streetbike           #
################################################################



---context:global

assign   turnInstructionMode  = 0 #0=none
assign    pass1coefficient 1
assign    pass2coefficient -1

assign   considerTurnRestrictions  true

assign uphillcost 60
assign uphillcutoff 0.5
assign downhillcutoff 2.0
assign downhillcost 100
assign elevationmaxbuffer 2
assign elevationpenaltybuffer 5



---context:way

################################################################
#   A bunch of helper-stuff before the actual waycost logic    #
################################################################

# Needed for some unknown reason, usualy only used for voice hints
assign priorityclassifier = if highway= then 1 else 0  

# Determine if way is part of a cycleroute
assign is_cycleroute
	or route_bicycle_icn=yes
	or route_bicycle_ncn=yes
	or route_bicycle_rcn=yes
	or route_bicycle_lcn=yes
	or lcn=proposed
	or rcn=proposed
	ncn=proposed

# Determine if we are driving against a oneway
assign badoneway =
	if oneway:bicycle=no then false
	else if reversedirection=yes then
		if oneway:bicycle=yes then true  
		else if oneway= then junction=roundabout 
		else oneway=yes|true|1
	else oneway=-1

# Determine if there is a cycleway
assign hascycleway
	# cycleway in both directions
	if
	and ( not cycleway= )
	and ( not cycleway=opposite|opposite_lane|opposite_track )
	and ( not cycleway=left|right )
	( not cycleway=no|none )	
	then true
	else if
	and ( and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) ) ( and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) )
	then true
	# no cycleway in either direction
	else if
	and ( or cycleway= cycleway=no|none|proposed ) and ( or cycleway:left= cycleway:left=no|sidepath ) ( or cycleway:right= cycleway:right=no|sidepath )
	then false
	# cycleway in the direction we are driving only
	else if	and reversedirection=yes ( or ( and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) ) cycleway=left ) then true
	else if and ( not reversedirection=yes ) ( or ( and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) ) cycleway=right ) then true
	else if and ( not reversedirection=yes ) ( or cycleway:left=opposite|opposite_lane|opposite_track cycleway=right ) then true
	else if and reversedirection=yes ( or cycleway:right=opposite|opposite_lane|opposite_track cycleway=left ) then true
	else false


# Needed to trigger initialcost, any fantasy value works as long as they differ for waytypes
# Value chances when going from way to way means initialcost is added
assign initialclassifier
	if hascycleway then 1
	else if highway=cycleway then 1
	else if highway=trunk then 2
	else if highway=trunk_link then 3
	else if highway=primary then 4
	else if highway=primary_link then 5
	else if highway=secondary then 6
	else if highway=secondary_link then 7
	else if highway=tertiary then 8
	else if highway=tertiary_link then 9
	else if highway=residential then 10
	else if highway=living_street then 11
	else if highway=service|rest_area|services then 12
	else if highway=track|path then 13
	else if highway=footway|pedestrian then 14
	else if highway=road|unclassified|unknown then 15
	else if highway=crossing then 16
	else if highway=steps then 17
	else if highway=corridor then 18
	else 19
	
# Determine if we have access
assign bikeaccess
	if bicycle=yes|designated|permissive|destination|mtb then true
	else if ( and badoneway bicycle=opposite ) then true
	else if bicycle=no|dismount|private|use_sidepath then false
	else if vehicle=yes|destination|permissive|designated then true
	else if vehicle=no|agricultural|private then false
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural|customers|delivery then false
	# no explicit access rules, make assumptions based on waytype
	else if
		or highway=residential|service|unclassified|road|unknown|living_street|rest_area|services
		or highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link
		or highway=track|path|cycleway|crossing
		( and highway=steps ramp:bicycle=yes )
		then true
	else false
	
assign footaccess
	if foot=yes|designated|permissive|destination then true
	else if foot=no|private|use_sidepath then false
	else if bicycle=dismount then true
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural|customers|delivery then false
	# no explicit access rules, make assumptions based on waytype
	else if
		or highway=residential|service|unclassified|road|unknown|living_street|rest_area|services
		or highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link
		or highway=track|path|crossing
		highway=footway|steps|pedestrian|corridor|platform
		then true
	else false


################################################################
#                 Inital and Turn Cost                         #
################################################################

assign initialcost_waytype
	if highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link then 100
	else 25

# getting on and off the bike is a fixed effort for each part of the way we need to walk
assign initialcost
	if and ( not bikeaccess ) footaccess then ( add initialcost_waytype 200 )
	else initialcost_waytype

#TODO
assign turncost 50

################################################################
#   Determine which roads can even be considered for routing   #
################################################################

assign access_cost
	if bikeaccess then 0.0
	else if footaccess then 15
	else 10000

################################################################
#                 Determine smoothness                         #
################################################################

assign tier0 0.0
assign tier1 0.1
assign tier2 0.3
assign tier3 0.4
assign tier4 0.6
assign tier5 1.0
assign tier6 1.5
assign tier7 3.0

assign smoothness_cost
	# smoothnes value is the best option to determine smoothness
	if ( not smoothness= ) then
		if smoothness=excellent then -0.1
		else if smoothness=good then tier0
		else if smoothness=intermediate then tier1
		else if smoothness=bad then tier4
		else if smoothness=very_bad then tier6
		else if smoothness=horrible then tier7
		else if smoothness=very_horrible then 4.0
		else if smoothness=impassable then 9.0
		else tier6
	# if smoothness is not given, the surface is great indicator for smoothness
	else if ( not surface= ) then
		if surface=asphalt then tier0
		else if surface=paved then tier1
		else if surface=concrete then tier1
		else if surface=paving_stones then tier1
		else if surface=metal then 0.2
		else if ( or surface=compacted surface=fine_gravel ) then tier2
		else if ( or surface=grass_paver surface=gravel ) then tier3
		else if ( or surface=unpaved surface=pebblestone ) then tier3
		else if ( or surface=sett surface=cobblestone ) then tier5
		else if ( or surface=grass surface=wood ) then tier5
		else if ( or surface=dirt or surface=earth surface=ground ) then tier5
		else if surface=mud then tier6
		else if ( or surface=clay surface=sand ) then 4.0
		else tier5
	# tracktype classification allows to determine approximate smoothness too
	else if ( not tracktype= ) then
		if tracktype=grade1 then tier1
		else if tracktype=grade2 then tier2
		else if tracktype=grade3 then tier3
		else if tracktype=grade4 then tier5
		else if tracktype=grade5 then tier6
		else tier7
	# fallback to mountainbike scale
	else if ( not mtb:scale= ) then
		if mtb:scale=0 then tier6
		else if mtb:scale=1 then tier7
		else 10000
	else if ( not mtb:scale:uphill= ) then
		if mtb:scale:uphill=0 then tier6
		else if mtb:scale:uphill=1 then tier7
		else 10000
	else if ( not route_mtb_= ) then 10000
	# fallback to hiking route classification
	else if ( not sac_scale= ) then
		if sac_scale=hiking then tier6  
		else 10000
	# finally fallback to make rough assumptions based on waytype
	else if ( not highway= ) then
		# mostly asphalt expected here
		if (
			or highway=primary|primary_link
			or highway=secondary|secondary_link
			or highway=tertiary|tertiary_link
			or highway=trunk|trunk_link
			or highway=residential
			or highway=living_street
			or highway=service
			or highway=unclassified
			or highway=crossing
			or highway=road
			or highway=unknown
			or highway=rest_area
			or highway=services 
			highway=cycleway )
			then tier0
		# footways are expected to be ok
		else if highway=footway|pedestrian|platform then tier1
		# probably not too bad smoothness with a dedicated bike
		else if ( and highway=path|track bicycle=designated ) then tier1
		# path and track are assumed unpaved if not specified
		else if highway=path|track then tier3
		else tier5
	else 10000
	
	
################################################################
#                  Traffic Penalty                             #
################################################################

assign traffic_tier1 0.1
assign traffic_tier2 0.2
assign traffic_tier3 0.3
assign traffic_tier4 0.5

assign traffic_cost 
	# many pedestrians but no cars expected
	if	or ( and foot=designated ( not segregated=yes ) )
		or ( and highway=footway|pedestrian ( not segregated=yes ) )
		( highway=platform|corridor )
		then traffic_tier1
	# a way specifically designed for bikes probably has no traffic
	else if ( and bicycle=designated ( not segregated=no ) ) then 0.0
	# anything without motor vehicles is fine
	else if motor_vehicle=no|private|agricultural|emergency then 0.0
	# 3+ lanes = lots of expected traffic
	else if and ( and oneway=yes|1|-1 lanes=3|4|5|6|7 ) ( not hascycleway ) then traffic_tier4
	else if and lanes=5|6|7  ( not hascycleway ) then tier4
	# wild guesses based on roadtype
	else if not hascycleway then
		if highway=trunk|trunk_link|primary|primary_link then traffic_tier4
		else if highway=secondary|secondary_link|tertiary|tertiary_link then traffic_tier3
		else if highway=residential|road|unknown|unclassified then traffic_tier2
		else 0.0
	else if hascycleway then
		if highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link then traffic_tier2
		else 0.0
	else 0.0


################################################################
#                Maxspeed Penalty                              #
################################################################

assign speed_tier1 0.2
assign speed_tier2 0.3
assign speed_tier3 0.4
assign speed_tier4 0.6

assign maxspeed_cost_raw
	if ( not maxspeed= ) then
		if maxspeed=70|80 then speed_tier1
		else if maxspeed=90|100|rural then speed_tier2
		else if maxspeed=110 then speed_tier3
		else if maxspeed=130 then speed_tier4
		else 0.0
	else if ( not highway= ) then
		# very rough guess unfortunately
		if highway=trunk|trunk_link then speed_tier2
		else if highway=primary|primary_link then speed_tier1
		else if highway=secondary|secondary_link then speed_tier1
		else 0.0
	else 0.0
		
# if the road has a cycleway anything up to speed tier 3 gets no penalty
assign maxspeed_cost if hascycleway then ( max 0.0 ( sub maxspeed_cost_raw speed_tier3 ) )  else maxspeed_cost_raw


################################################################
#       onewaycost, direct copy from poutnik profile           #
################################################################

assign oneway_cost =
	if badoneway then
		if cycleway=opposite|opposite_lane|opposite_track  then 0							
		else if oneway:bicycle=no then 0
		else if highway=footway then 2.0
		else if highway=primary|primary_link then 50
		else if highway=secondary|secondary_link then 40
		else if highway=tertiary|tertiary_link then 30
	else 20.0   
else 0.0 


################################################################
#      Roads that are part of a cycleroute are preferred       #
################################################################

# We go 20% extra way, if it means we are on a cycleroute
assign cycleroute_cost if ( not is_cycleroute ) then 0.2 else 0.0


################################################################
#                Final Way Costfactor Calculation              #
################################################################

assign costfactor max ( add 1.0 add access_cost add smoothness_cost add traffic_cost add maxspeed_cost add oneway_cost cycleroute_cost ) 1.0


					  
---context:node

################################################################
#   A bunch of helper-stuff before the actual nodecost logic   #
################################################################

assign bikeaccess_node
	if bicycle=yes|designated|permissive|destination then true
	else if bicycle=no|dismount|private then false
	else if vehicle=yes|destination|permissive|designated then true
	else if vehicle=no|private|agricultural then false
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural then false
	else true
	
assign footaccess_node
	if foot=yes|designated|permissive|destination then true
	else if foot=no|private then false
	else if bicycle=dismount then true
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural then false
	else true


################################################################
#       Determine which points (like barriers) stop us         #
################################################################

assign accesscost_node
	if crossing=no then 10000
	else if ( and bikeaccess_node ( not barrier= ) ) then 25
	else if bikeaccess_node then 0
	else if footaccess_node then 200
	else 10000

################################################################
#      Add costs for assorted things like traffic lights       #
################################################################

assign nodecost =
	if highway=traffic_signals then 100
	else if highway=stop|give_way  then 50
	else if crossing=traffic_signals then 100
	else if railway=level_crossing then 100
	else if railway=crossing then 100
	else if railway=signal then 150
	else if ford=yes then 500
	else if highway=steps then 200
	#else if traffic_calming then 60
	else if ( not crossing= ) then 50
	else 0


################################################################
#                Final Way Costfactor Calculation              #
################################################################

assign initialcost add accesscost_node nodecost
