################################################################
#          A BRouter profile suited for a streetbike           #
#          Note: Right hand traffic countries only             #
################################################################



---context:global

assign turnInstructionMode 0
assign pass1coefficient 1
assign pass2coefficient -1

assign considerTurnRestrictions true

assign uphillcost 60
assign uphillcutoff 0.5
assign downhillcutoff 2.0
assign downhillcost 100



---context:way

################################################################
#   A bunch of helper-stuff before the actual waycost logic    #
################################################################

# Needed for some unknown reason, usualy only used for voice hints
assign priorityclassifier = if highway= then 1 else 0  

# Determine if way is part of a cycleroute
assign is_cycleroute
	or route_bicycle_rcn=yes
	or route_bicycle_lcn=yes
	or route_bicycle_icn=yes
	or route_bicycle_ncn=yes
	or lcn=proposed
	or rcn=proposed
	ncn=proposed

# Determine if we are driving against a oneway
# Missing: cycleway:right/left:oneway=no, we are limited by brouter data here
assign badoneway =
	if oneway:bicycle=no then false
	else if reversedirection=yes then
		if oneway:bicycle=yes then true  
		else if and oneway=yes|true|1 ( or oneway:bicycle=opposite bicycle=opposite ) then false
		else if and oneway=yes|true|1 ( or cycleway=opposite|opposite_lane|opposite_track or cycleway:left=opposite|opposite_lane|opposite_track cycleway:right=opposite|opposite_lane|opposite_track ) then false
		else if oneway= then junction=roundabout 
		else oneway=yes|true|1
	else if ( not reversedirection=yes ) then
		if oneway:bicycle=yes then false
		else if and oneway=-1 ( or oneway:bicycle=opposite bicycle=opposite ) then false
		else if and oneway=-1 ( or cycleway=opposite|opposite_lane|opposite_track or cycleway:left=opposite|opposite_lane|opposite_track cycleway:right=opposite|opposite_lane|opposite_track ) then false
		else oneway=-1
	else true

# Determine if there is a cycleway
# Missing: cycleway:right/left:oneway=no, we are limited by brouter data here
assign hascycleway
	# cycleway in both directions
	if and ( not cycleway= ) ( not cycleway=left|right|no|none|opposite|proposed ) then true
	else if
	and ( and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) ) ( and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) )
	then true
	# not a cycleway anywhere
	else if
	and ( or cycleway= cycleway=no|none|proposed ) and ( or cycleway:left= cycleway:left=no|sidepath ) ( or cycleway:right= cycleway:right=no|sidepath )
	then false
	# oneway street stuff
	else if ( and oneway=yes|true|1|-1 reversedirection=yes ) then
		if and oneway=yes|true|1 ( or cycleway=opposite_lane|opposite_track or cycleway:left=opposite_lane|opposite_track cycleway:right=opposite_lane|opposite_track ) then true
		else if and oneway=-1 ( or ( and ( not cycleway= ) ( not cycleway=left|right|no|none|opposite|proposed ) ) or ( and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) )  ( and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) ) ) then true
		else false
	else if ( and oneway=yes|true|1|-1 ( not reversedirection=yes ) ) then
		if and oneway=yes|true|1 ( or ( and ( not cycleway= ) ( not cycleway=left|right|no|none|opposite|proposed ) ) or ( and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) )  ( and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) ) ) then true
		else if and oneway=-1 ( or cycleway=opposite_lane|opposite_track or cycleway:left=opposite_lane|opposite_track cycleway:right=opposite_lane|opposite_track ) then true
		else false
	# twoway street stuff
	else if reversedirection=yes then
		if and ( not cycleway:left= ) ( not cycleway:left=opposite|opposite_lane|opposite_track|no|sidepath ) then true
		else if cycleway=left then true
		else false
	else if ( not reversedirection=yes ) then
		if and ( not cycleway:right= ) ( not cycleway:right=opposite|opposite_lane|opposite_track|no|sidepath ) then true
		else if cycleway=right then true
		else false
	else false

# Needed to trigger initialcost, any fantasy value works as long as they differ for waytypes
# Value chances when going from way to way means initialcost is added
assign initialclassifier
	if hascycleway then 1
	else if highway=residential then 10
	else if highway=service|rest_area|services then 12
	else if highway=track|path then 13
	else if highway=footway|pedestrian then 14
	else if highway=road|unclassified then 15
	else if highway=tertiary then 8
	else if highway=secondary then 6
	else if highway=primary then 4
	else if highway=cycleway then 1
	else if highway=living_street then 11
	else if highway=steps then 17
	else if highway=trunk then 2
	else if highway=trunk_link then 3
	else if highway=primary_link then 5
	else if highway=secondary_link then 7
	else if highway=tertiary_link then 9
	else if highway=crossing then 16
	else if highway=corridor then 18
	else 19
	
# Determine if we have access
assign bikeaccess
	if bicycle=yes|designated|permissive|destination|mtb then true
	else if bicycle=no|dismount|private|use_sidepath then false
	else if vehicle=yes|destination|permissive|designated then true
	else if vehicle=no|agricultural|private then false
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural|customers|delivery then false
	# no explicit access rules, make assumptions based on waytype
	else if
		or highway=residential|service|unclassified|road|living_street|rest_area|services
		or highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link
		or highway=track|path|cycleway|crossing
		( and highway=steps ramp:bicycle=yes )
		then true
	else false

assign footaccess
	if foot=yes|designated|permissive|destination then true
	else if foot=no|private|use_sidepath then false
	else if bicycle=dismount then true
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural|customers|delivery then false
	# no explicit access rules, make assumptions based on waytype
	else if
		or highway=residential|service|unclassified|road|living_street|rest_area|services
		or highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link|tertiary|tertiary_link
		or highway=track|path|crossing
		highway=footway|steps|pedestrian|corridor|platform
		then true
	else false


################################################################
#   Determine which roads can even be considered for routing   #
################################################################

assign access_cost
	if bikeaccess then 0
	else if footaccess then 15
	else 10000

################################################################
#                     Determine smoothness                     #
################################################################

assign smoothness_tier0 0.0
assign smoothness_tier1 0.1
assign smoothness_tier2 0.3
assign smoothness_tier3 0.4
assign smoothness_tier4 0.6
assign smoothness_tier5 1.0
assign smoothness_tier6 1.5
assign smoothness_tier7 3.0

assign smoothness_cost
	# smoothnes value is the best option to determine smoothness
	if ( not smoothness= ) then
		if smoothness=excellent then -0.1
		else if smoothness=very_good|good then smoothness_tier0
		else if smoothness=intermediate|medium then smoothness_tier1
		else if smoothness=bad|robust_wheels|poor then smoothness_tier4
		else if smoothness=very_bad|high_clearance|rough then smoothness_tier6
		else if smoothness=horrible|off_road_wheels then smoothness_tier7
		else if smoothness=very_horrible then 4.0
		else if smoothness=impassable then 9.0
		else smoothness_tier6
	# if smoothness is not given, the surface is great indicator for smoothness
	else if ( not surface= ) then
		if surface=asphalt then smoothness_tier0
		else if surface=paved then smoothness_tier1
		else if surface=concrete then smoothness_tier1
		else if surface=paving_stones then smoothness_tier1
		else if surface=compacted|fine_gravel|metal then smoothness_tier2
		else if surface=grass_paver|gravel then smoothness_tier3
		else if surface=unpaved|pebblestone then smoothness_tier3
		else if surface=sett|cobblestone then smoothness_tier5
		else if surface=grass|wood then smoothness_tier5
		else if surface=dirt|earth|ground then smoothness_tier5
		else if surface=mud then smoothness_tier6
		else if surface=clay|sand then 4.0
		else smoothness_tier5
	# tracktype classification allows to determine approximate smoothness too
	else if ( not tracktype= ) then
		if tracktype=grade1 then smoothness_tier1
		else if tracktype=grade2 then smoothness_tier2
		else if tracktype=grade3 then smoothness_tier3
		else if tracktype=grade4 then smoothness_tier5
		else if tracktype=grade5 then smoothness_tier6
		else smoothness_tier7
	# fallback to mountainbike scale
	else if ( not mtb:scale= ) then
		if mtb:scale=0 then smoothness_tier6
		else if mtb:scale=1 then smoothness_tier7
		else 10000
	else if ( not mtb:scale:uphill= ) then
		if mtb:scale:uphill=0 then smoothness_tier6
		else if mtb:scale:uphill=1 then smoothness_tier7
		else 10000
	else if or ( not route_mtb_= ) route=mtb then 10000
	# fallback to hiking route classification
	else if ( not sac_scale= ) then
		if sac_scale=hiking then smoothness_tier6  
		else 10000
	# finally fallback to make rough assumptions based on waytype
	else if ( not highway= ) then
		# mostly asphalt expected here
		if (
			or highway=residential
			or highway=service
			or highway=unclassified
			or highway=tertiary|tertiary_link
			or highway=secondary|secondary_link
			or highway=primary|primary_link
			or highway=trunk|trunk_link
			or highway=living_street
			or highway=crossing
			or highway=road
			or highway=rest_area
			or highway=services 
			highway=cycleway )
			then smoothness_tier0
		# footways are expected to be ok
		else if highway=footway|pedestrian|platform then smoothness_tier1
		# probably not too bad smoothness when dedicated for bike
		else if ( and highway=path|track bicycle=designated ) then smoothness_tier1
		# path and track are assumed unpaved if not specified
		else if highway=path|track then smoothness_tier3
		else smoothness_tier5
	else 10000


################################################################
#                       Traffic Penalty                        #
################################################################

assign traffic_tier1 0.1
assign traffic_tier2 0.2
assign traffic_tier3 0.3
assign traffic_tier4 0.5

assign traffic_cost 
	# many pedestrians but no cars expected
	if	or ( and foot=designated ( not segregated=yes ) )
		or ( and highway=footway|pedestrian ( not segregated=yes ) )
		( highway=platform|corridor )
		then traffic_tier1
	# anything without motor vehicles is fine
	else if motor_vehicle=no|private|agricultural|emergency then 0.0
	# 3+ lanes = lots of expected traffic
	else if and ( and oneway=yes|true|1|-1 lanes=3|4|5|6|7 ) ( not hascycleway ) then traffic_tier4
	else if and lanes=5|6|7  ( not hascycleway ) then traffic_tier4
	# a way specifically designed for bikes probably has no traffic
	else if ( and bicycle=designated ( not segregated=no ) ) then 0.0
	# wild traffic guesses based on roadtype only
	else if not hascycleway then
		if highway=trunk|trunk_link|primary|primary_link then traffic_tier4
		else if highway=secondary|secondary_link|tertiary|tertiary_link then traffic_tier3
		else if highway=residential|road|unclassified then traffic_tier2
		else 0.0
	else if hascycleway then
		if highway=trunk|trunk_link|primary|primary_link|secondary|secondary_link then traffic_tier2
		else 0.0
	else 0.0


################################################################
#                       Maxspeed Penalty                       #
################################################################

assign speed_tier1 0.2
assign speed_tier2 0.3
assign speed_tier3 0.4
assign speed_tier4 0.6

assign maxspeed_cost_raw
	if ( not maxspeed= ) then
		if maxspeed=70|80 then speed_tier1
		else if maxspeed=90|100|rural then speed_tier2
		else if maxspeed=110 then speed_tier3
		else if maxspeed=130 then speed_tier4
		else 0.0
	else if ( not highway= ) then
		# very rough guess unfortunately
		if highway=trunk|trunk_link then speed_tier2
		else if highway=primary|primary_link then speed_tier1
		else if highway=secondary|secondary_link then speed_tier1
		else 0.0
	else 0.0

# if the road has a cycleway anything up to speed tier 2 gets no penalty
assign maxspeed_cost if hascycleway then ( max 0.0 ( sub maxspeed_cost_raw speed_tier2 ) )  else maxspeed_cost_raw


################################################################
#                          onewaycost                          #
################################################################

assign oneway_cost =
	if badoneway then
		if greater traffic_cost traffic_tier1 then 50
		else 20
	else 0


################################################################
#                     Inital and Turn Cost                     #
################################################################

assign initialcost_waypreference
	# ways with lots of traffic mean we have to be slow when going onto them
	if greater traffic_cost traffic_tier2 then 100
	else 25

assign initialcost
	# getting on and off the bike is a fixed effort for each part of the way we need to walk
	if and ( not bikeaccess ) footaccess then ( add initialcost_waypreference 200 )
	else initialcost_waypreference

assign turncost
	# unfortunately footways are often drawn in odd shapes in OSM not representing how you really drive
	if highway=footway then 0
	# we are walking, no cost for turning
	else if ( not bikeaccess ) then 0
	# we are on a crappy way and slow
	else if ( greater smoothness_cost smoothness_tier5 ) then 10
	else if ( greater smoothness_cost smoothness_tier3 ) then 30
	# we are on an ok way and probably fast enough that turning is annoying
	else 60


################################################################
#      Roads that are part of a cycleroute are preferred       #
################################################################

# We go 20% extra way, if it means we are on a cycleroute
assign cycleroute_cost
	if class:bicycle=-3 then 3.0
	else if class:bicycle=-2 then 1.0
	else if class:bicycle=-1 then 0.4
	else if class:bicycle=3 then -0.4
	else if class:bicycle=2 then -0.2
	else if class:bicycle=1 then 0.0
	else if ( not is_cycleroute ) then 0.2
	else 0.0


################################################################
#               Final Way Costfactor Calculation               #
################################################################

assign costfactor max ( add 1.0 add access_cost add smoothness_cost add traffic_cost add maxspeed_cost add oneway_cost cycleroute_cost ) 1.0


		  
---context:node

################################################################
#   A bunch of helper-stuff before the actual nodecost logic   #
################################################################

assign bikeaccess
	if bicycle=yes|designated|permissive|destination then true
	else if bicycle=no|dismount|private then false
	else if vehicle=yes|destination|permissive|designated then true
	else if vehicle=no|private|agricultural then false
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural then false
	else true

assign footaccess
	if foot=yes|designated|permissive|destination then true
	else if foot=no|private then false
	else if bicycle=dismount then true
	else if access=yes|permissive|destination|designated then true
	else if access=private|no|agricultural then false
	else true


################################################################
#        Determine which points (like barriers) stop us        #
################################################################

assign access_cost
	# crossing=no evaluation might be too agressive, but we are limited by brouter data here
	if and crossing=no ( not highway=traffic_signals ) then 10000
	# even if we can pass a barrier, we likely must slow down a bit
	else if ( and bikeaccess ( not barrier= ) ) then 25
	else if bikeaccess then 0
	else if footaccess then 200
	else 10000


################################################################
#      Add costs for assorted things like traffic lights       #
################################################################

assign node_cost =
	if highway=traffic_signals then 120
	else if crossing=traffic_signals then 120
	else if railway=signal then 150
	else if railway=level_crossing then 80
	else if railway=crossing then 80
	else if highway=stop|give_way  then 25
	else if highway=traffic_calming then 50
	else if crossing=zebra then 50
	else if ford=yes then 500
	else if highway=steps then 200
	else 0


################################################################
#               Final Way Costfactor Calculation               #
################################################################

assign initialcost add access_cost node_cost
